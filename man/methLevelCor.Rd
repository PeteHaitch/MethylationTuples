% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/methLevelCor.R
\name{methLevelCor}
\alias{methLevelCor}
\title{Compute within-sample correlations of pairs of methylation levels.}
\usage{
methLevelCor(methpat, pair_type = c("adjacent", "all", "strict_adjacent"),
  ipd = seq_len(2000L), ref_loci, method = c("pearson", "kendall",
  "spearman"), conf.level = 0.95, feature, ...)
}
\arguments{
\item{methpat}{A \code{\link{MethPat}} object containing 1-tuples.}

\item{pair_type}{A character string giving the type of pairs to be
constructed when computing correlations. One of "\code{neighbours}" or
"\code{all}", can be abbreviated. Please see the below section, "Construction
of pairs of methylation loci", for details.}

\item{ref_loci}{An \code{\link{MTuples}} object with the locations of all
methylation loci 1-tuples in the sample/reference genome. Only required if
\code{pair_type = "neighbours"} and otherwise ignored. Please see the below
section, "Construction of pairs of methylation loci", for details.}

\item{method}{A character string indicating which correlation coefficient is
to be computed. One of "\code{pearson}" (default) or "\code{spearman}", can
be abbreviated.}

\item{feature}{An optional \code{\link[GenomicRanges]{GRanges}} object with
the locations of a "genomic feature". This
\code{\link[GenomicRanges]{GRanges}} object must be disjoint (see
\code{\link[GenomicRanges]{isDisjoint}}). Please see the
below section, "Stratifying pairs by a genomic feature", for details.}

\item{...}{Additional arguments passed to \code{\link{methLevel}}, such as
\code{min_cov}, \code{statistic} and \code{offset}.}

\item{max_ipd}{An \code{integer} specifying the maximal IPD of pairs
(default: 2000). Only required if \code{pair_type = "all"} and otherwise
ignored. Please see the below section, "Construction of pairs of
methylation loci", for details.}
}
\description{
Given a \code{\link{MethPat}} object containing 1-tuples,
\code{methLevelCor} computes the within-sample correlations of pairs of
methylation levels. Methylation levels are computed by
\code{\link{methLevel}}.
}
\details{
The manner in which the pairs are constructed is determined by additional
arguments - see the section, "Constructing pairs of methylation loci".
Correlations are stratified by the \code{strand}, the intra-pair distance
and the \code{feature} (if supplied) of the pairs.
}
\section{Constructing pairs of methylation loci}{

There are two algorithms for constructing pairs of methylation loci:
\code{neighbours}, which requires the specification of \code{mtuples}, and
\code{all}, which requires the specification of \code{max_ipd}.

\itemize{
 \item{\code{pair_type = "neighbours"}:}{ Creates pairs of methylation
 levels from neighbouring methylation loci. It checks that the constructed
 pairs are neighbours by comparing these to the set of all known methylation
 loci in the sample, hence this must be given by \code{mtuples}.}

 \item{\code{pair_type = "all"}:}{ Creates pairs of methylation levels using
 all methylation loci in the sample such that each pair has an intra-pair
 distance less than or equal to \code{max_ipd}.}

}
}

\section{Stratifying pairs by a genomic feature}{

Pairs of methylation levels may be stratified by whether they are inside
or outside of a "genomic feature". For our example, we will use CpG islands
as our feature. In this case \code{feature} should be a
\code{\link[GenomicRanges]{GRanges}} object containing all CpG islands in
the genome.

The assignment of pairs as "inside" or "outside" is suprisingly nuanced. The
\code{same_feature} argument controls how a pair is assigned
as being "inside" or "outside" the feature.

Please think carefully about what defines a pair as being "inside" and
"outside" a feature for your particular needs. While I have attempted to
make \code{methLevelCor} fairly general, if you have more complex
requirements then you may find the available options to be insufficient.

\itemize{
 \item{\code{same_feature = FALSE}: }{A pair is considered to be "inside"
 the feature if and only if both loci that make up in the pair overlap an
 element of \code{feature}. However, the two loci in each pair may overlap
 different elements of \code{feature}, e.g., different CpG islands.
 Similarly, a pair is considered to be "outside" the feature if and only if
 both loci that make up the pair overlap a "gap" between elements of
 \code{feature}. However, the two loci in each pair may overlap different
 "gaps", non-CpG island regions of the genome. This is the default.
 }
 \item{\code{same_feature = TRUE}: A pair is considered to be "inside" the
 feature only if and only if both loci that make up the pair are in the same
 feature, e.g., the same CpG island. Similarly, a pair is considered
 "outside" the feature only if and only if both loci that make up the pair
 are in the same "gap" between elements of \code{feature}. All other pairs
  are discarded, e.g., those where both loci that make up the pair are in a
  CpG island but lie in distinct CpG islands.}
}
}

