% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/MethPat-class.R
\docType{class}
\name{MethPat}
\alias{IPD,MethPat-method}
\alias{MethPat}
\alias{MethPat,ANY-method}
\alias{MethPat,missing-method}
\alias{MethPat-class}
\alias{methinfo,MethPat-method}
\alias{methinfo<-,MethPat,ANY-method}
\alias{methtype,MethPat-method}
\alias{methtype<-,MethPat,ANY-method}
\alias{rowTuples}
\alias{rowTuples,MethPat-method}
\alias{rowTuples<-}
\alias{rowTuples<-,MethPat-method}
\alias{show,MethPat-method}
\alias{size,MethPat-method}
\alias{tuples,MethPat-method}
\alias{tuples<-,MethPat-method}
\title{MethPat objects}
\usage{
MethPat(assays, rowTuples, ...)

rowTuples(x, ...)

rowTuples(x, ...) <- value

\S4method{MethPat}{ANY}(assays, rowTuples, ...)

\S4method{MethPat}{missing}(assays, rowTuples, ...)

\S4method{rowTuples}{MethPat}(x, ...)

\S4method{methinfo}{MethPat}(x)

\S4method{methtype}{MethPat}(x)

\S4method{rowTuples}{MethPat}(x, ...) <- value

\S4method{methinfo}{MethPat,ANY}(x) <- value

\S4method{methtype}{MethPat,ANY}(x) <- value

\S4method{size}{MethPat}(x)

\S4method{tuples}{MethPat}(x)

\S4method{tuples}{MethPat}(x) <- value

\S4method{IPD}{MethPat}(x)

\S4method{show}{MethPat}(object)
}
\arguments{
\item{assays}{A \link{list} of \linkS4class{SimpleList} of 
assays. Must include a 3-dimensional array-like assay named 'counts'; see 
'Description' for further details.}

\item{rowTuples}{A \linkS4class{MTuples} object; see 'Description' for 
further details.}

\item{...}{Additional arguments passed down to the 
\code{\link[SummarizedExperiment]{SummarizedExperiment}} constructor, such 
as \code{colData} and \code{metadata}. Note that this may not include 
\code{rowRanges} or \code{rowData} since MethPat objects instead use 
\code{rowTuples}.}

\item{x}{A MethPat object.}

\item{value}{A replacement object of the appropriate class.}

\item{object}{A MethPat object.}
}
\description{
The MethPat class is a matrix-like container where rows represent genomic 
tuples of interest (as a \linkS4class{MTuples} object) and columns represent 
samples (with sample data summarized as a \linkS4class{DataFrame}). A 
MethPat object contains the counts of how many times each methylation 
pattern is observed for each genomic tuple in each sample. For example, 
there are four possible methylation patterns at 2-tuples: \code{MM}, 
\code{MU}, \code{UM} and \code{UU}.

MethPat is a subclass of the 
\linkS4class{RangedSummarizedExperiment} class and, as such, 
all the slots documented in \code{?\linkS4class{RangedSummarizedExperiment}}
also exist for a MethPat object. The key differences are:
\itemize{
 \item The \code{rowRanges} must be a \linkS4class{MTuples}
 object rather than a \code{\link[GenomicRanges]{GRanges}} object. 
 \item The \code{assays} must include an element named 'counts', 
 which is a 3-dimensional array-like object storing the counts of 
 methylation patterns at each genomic tuple; each row corresponds to a 
 genomic tuple, each column to a sample, and each slice to a particular 
 methylation pattern. For example, a MethPat object containing the 
 methylation patterns at 10 2-tuples for 5 samples has a 'counts' assay with 
 10 rows, 5 columns, and \eqn{2^3 = 8} slices (named \code{MMM}, \code{MMU}, 
 \code{MUM}, \code{MUU}, \code{UMM}, \code{UMU}, \code{UUM}, and \code{UUU}, 
 where \code{M} = methylated and \code{U} = unmethylated). Several different 
 backends for this 'counts' assay are supported, see 'Counts assay' section 
 for details.
}
Similarly, all the methods documented in 
\code{?\link[SummarizedExperiment]{RangedSummarizedExperiment}} also work on 
a MethPat object. The methods documented below are additional methods that 
are specific to MethPat objects.
}
\section{Details}{

The rows of a MethPat object represent tuples (in genomic coordinates) of 
interest. The tuples of interest are described by a \link{MTuples} or a 
\link{MTuplesList} object, accessible using the \code{rowTuples} method, 
described below. The \link{MTuples} and \link{MTuplesList} classes contain 
sequence (e.g., chromosome) name, genomic coordinates, and strand 
information, along with methylation-type information (e.g., CG or CHG). Each 
tuple can be annotated with additional data; this data might be used to 
describe the range (e.g., CpG island status) or to summarized results
relevant to the tuple. Rows may or may not have row names; they often will 
not.
}

\section{Counts assay}{

The 'counts' can be stored using any 3-dimensional array-like object. 
However, these data are typically large, which can make it prohibitive to 
these in-memory using a standard \link[base]{array}. We offer instead an 
\strong{on disk} data structure (\linkS4class{HDF5Array}) and an efficient 
\strong{in memory} data structure specifically designed for these type of 
data (\linkS4class{DSArray}).

There is considerable sparsity and structure in typical m-tuples (m > 1) 
'counts' data obtained from whole-genome bisulfite-sequencing data. 
Specifically, we typically only observe a small number of combinations of 
counts of each methylation pattern across all tuples and samples, and for 
many tuples we do not observe \emph{any} counts in many samples. We may 
think of this structure resulting in the 'counts' array having many 
duplicate 'slices'; this is exactly the type of data the 
\linkS4class{DSArray} class was designed to efficiently store.
}

\section{Constructor}{

MethPat instances are typically constructed by importing data using 
\code{\link{readMethtuple}}, but they can also be created using the 
\code{MethPat} constructor using arguments similar to the 
\code{\link[SummarizedExperiment]{SummarizedExperiment}} constructor.
}

\section{Accessors}{

In the following code snippets, \code{x} is a MethPat instance.

\describe{
 \item{\code{rowTuples(x)}, \code{rowTuples(x) <- value}:}{Get or set the row 
 data. \code{value} is a \link{MTuples} or \link{MTuplesList} object. Row 
 names of \code{value} must be \code{NULL} or consistent with the existing 
 row names of \code{x}. These are just aliases for \code{rowRanges} and 
 \code{rowRanges<-}, respectively.}
}
}

\section{MTuples compatibility (rowTuples access)}{

Many \linkS4class{MTuples} and \linkS4class{MTuplesList} operations are 
supported on MethPat objects, using \code{rowTuples}.

Supported operations include: \code{\link{compare}}, 
\code{\link{duplicated}}, \code{\link{end}}, \code{\link{end<-}}, 
\code{\link[GenomicTuples]{gtuples}}, \code{\link{match}}, 
\code{\link{mcols}}, \code{\link{mcols<-}}, \code{\link{methinfo}},
\code{\link{methtype}}, \code{\link{order}}, \code{\link{ranges}}, 
\code{\link{ranges<-}}, \code{\link{seqinfo}}, \code{\link{seqinfo<-}}, 
\code{\link{seqnames}}, \code{\link{sort}}, \code{\link{start}}, 
\code{\link{start<-}}, \code{\link{strand}}, \code{\link{strand<-}}, 
\code{\link[GenomicTuples]{tuples}}, \code{\link[GenomicTuples]{tuples<-}},
\code{\link{width}}, \code{\link{width<-}}.

Since the \linkS4class{MTuples} class is a subclass of the 
\linkS4class{GTuples} class, which is in turn a subclass of the 
\linkS4class{GRanges} class, there are also methods compatible with 
\linkS4class{GTuples}/\linkS4class{GRanges}. See also 
\code{?\link[SummarizedExperiment]{shift}},
\code{?\link[SummarizedExperiment]{isDisjoint}}, 
\code{?\link[SummarizedExperiment]{coverage}}, 
\code{?\link[SummarizedExperiment]{findOverlaps}}, and 
\code{?\link[SummarizedExperiment]{nearest}} for more 
\emph{GTuples/GRanges compatibility methods}.

Not all \linkS4class{MTuples}/\linkS4class{GRanges} 
operations are supported, because they do not make sense for MethPat objects 
(e.g., \code{name}, \code{as.data.frame}, \code{c}, \code{splitAsList}), 
involve non-trivial combination or splitting or rows (e.g., \code{disjoin}, 
\code{gaps}, \code{reduce}, \code{unique}) or have not yet been implemented 
(\code{Ops}, \code{map}, \code{window}, \code{window<-}).

\strong{WARNING:} The use of \code{ranges(x)}, \code{ranges(x) <- value}, 
\code{start(x)}, \code{start(x) <- value}, \code{end(x)}, 
\code{end(x) <- value}, \code{width(x)} and \code{width(x) <- value} are 
discouraged (although not forbidden) since these are generally not what is 
really desired or required when working with MethPat objects; see 
\linkS4class{GTuples} for further discussion.
}

\section{Subsetting}{

In the code snippets below, \code{x} is a MethPat object.

\describe{
 \item{\code{subset(x, subset, select):}}{Create a subset of \code{x} using 
 an expression \code{subset} referring to columns of \code{rowTuples(x)} 
 (including "seqnames", "start", "end", "width", "strand", and 
 \code{names(mcols(x))}) and/or \code{select} referring to column names of 
 \code{colData(x)}.}
}
}

\section{Extension}{

MethPat is implemented as an S4 class, and can be extended in the usual way, 
using \code{contains = "Methpat"} in the new class definition.
}

\section{Combining}{

In the code snippets below, \code{x}, \code{y} and \code{...} are 
MethPat instances to be combined. All \code{MethPat} instances must have the 
same \code{\link{size}} tuples and have compatible \link{Seqinfo} and 
\link{MethInfo}.

\describe{
 \item{\code{cbind(...), rbind(...)}:}{\code{cbind} combines objects with 
 identical tuples (\code{rowTuples}) but different samples (columns in 
 \code{assays}). The colnames in \code{colData} must match or an error is 
 thrown. Duplicate columns of \code{mcols(rowRanges(MethPat))} must 
 contain the same data.
 
 \code{rbind} combines objects with different tuples (\code{rowTuples}) and 
 the same subjects in (columns in \code{assays}). Duplicate columns of 
 \code{colData} must contain the same data.
 
 \code{metadata} from all objects are combined into a 
 \code{list} with no name checking.}
}
}
\examples{
set.seed(666)
nrow <- 10
ncol <- 4
nslice <- 2 ^ 2
mt <- MTuples(seqnames = c(rep("chr1", 7), rep("chr2", 3)),
              tuples = matrix(sort(sample(300, nrow * log2(nslice))), 
                              ncol = log2(nslice),
                              byrow = TRUE),
              methinfo = MethInfo("CG"))
counts <- array(rpois(nrow * ncol * nslice, 13), dim = c(nrow, ncol, nslice),
                dimnames = list(NULL, NULL, c("MM", "MU", "UM", "UU")))

# Construct a MethPat object
# `counts` assay can be a base::array, a DSArray::DSArray, or a
# HDF5Array::HDF5Array
mp_base <- MethPat(assays = counts,
                   rowTuples = mt)
mp_dsarray <- MethPat(assays = DSArray::DSArray(counts, MARGIN = 2),
                      rowTuples = mt)
mp_hdf5array <- MethPat(assays = HDF5Array::HDF5Array(counts),
                        rowTuples = mt)

assay(mp_base)
assay(mp_dsarray)
assay(mp_hdf5array)
}
\seealso{
\itemize{
 \item \link{readMethtuple} for constructing MethPat objects from 
   \code{methtuple} output.
 \item \linkS4class{RangedSummarizedExperiment} objects.
 \item \link[SummarizedExperiment]{shift}, 
 \link[SummarizedExperiment]{isDisjoint}, 
 \link[SummarizedExperiment]{coverage}, 
 \link[SummarizedExperiment]{findOverlaps}, and 
 \link[SummarizedExperiment]{nearest} for more 
 \emph{GTuples/GRanges compatibility methods}.
 \item \linkS4class{MTuples} objects.
 \item \linkS4class{GTuples} objects in the \pkg{GenomicTuples} 
 package.
}
}

