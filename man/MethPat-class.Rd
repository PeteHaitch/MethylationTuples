% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/MethPat-class.R
\docType{class}
\name{MethPat-class}
\alias{MethPat}
\alias{MethPat-class}
\title{MethPat instances}
\arguments{
\item{assays}{A \code{\link[base]{list}} or
\code{\link[S4Vectors]{SimpleList}} of matrix elements. All elements of the
list must have the same dimensions, and dimension names (if present) must be
consistent across elements and with row names of \code{rowRanges} and
\code{colData}. Specifically, for a MethPat object containing the
methylation patterns at genomic tuples of \code{\link[GenomicTuples]{size}}
\eqn{= m}, there are \eqn{2^m} required assays. For example, for 2-tuples
there are 4 required assays that must be named \code{MM}, \code{MU},
\code{UM} and \code{UU} (\code{M} = methylated, \code{U} = unmethylated).
\strong{TODO:} Should the \code{.makeMethPatNames} function be exported
and referenced here?}

\item{rowTuples}{A \code{\link{MTuples}} instance describing
the genomic tuple of the methylation loci. Names, if present, become the
row names of the MethPat. The length of the \code{\link{MTuples}}
must equal the number of rows of the matrices in \code{assays}.}

\item{colData}{An optional, but recommended,
\code{\link[S4Vectors]{DataFrame}} describing the samples. Row names, if
present, become the column names of the MethPat object.}

\item{metadata}{An optional \code{\link[base]{list}} of arbitrary content
describing the overall experiment.}

\item{...}{For \code{MethPat}, S4 methods \code{\link[base]{list}} and
\code{\link[base]{matrix}}, arguments identical to those of the
\code{\link[S4Vectors]{SimpleList}} method.
For \code{rowTuples}, ignored.
\strong{TODO}: Check whether
this param can be deleted from docs since the documentation is rather
complex (inherited from RangedSummarizedExperiment).}

\item{x}{A MethPat object. The \code{rowTuples} setter will also accept a
\link[SummarizedExperiment]{SummarizedExperiment0} object and will first
coerce it to a \link[SummarizedExperiment]{RangedSummarizedExperiment}
before it sets \code{value} on it. \strong{TODO}: Check whether this
actually works.}

\item{value}{A \link{MTuples} or \link{MTuplesList} object.}

\item{subset}{An expression which, when evaluated in the context of
\code{rowTuples(x)}, is a logical vector indicating elements of rows to
keep: missing values are taken as false.}

\item{select}{An expression which, when evaluated in the context of
\code{colData(x)}, is a logical vector indicating elements or rows to
keep: missing values are taken as false.}
}
\description{
The MethPat class is a matrix-like container where rows represent genomic
tuples of interest (as a \code{MTuples} object) and columns represent
samples (with sample data summarized as a
\code{\link{DataFrame}}). A MethPat object contains the
counts of how many times each methylation pattern is observed for each
genomic tuple in each sample. For example, there are four possible
methylation patterns at 2-tuples: \code{MM}, \code{MU}, \code{UM} and
\code{UU}.

MethPat is a subclass of the
\link[SummarizedExperiment]{RangedSummarizedExperiment} class and, as such,
(almost) all the methods documented in
\code{?\link[SummarizedExperiment]{RangedSummarizedExperiment}} also work on
a MethPat object. The methods documented below are additional methods that
are specific to MethPat objects. The key differences are:
\itemize{
 \item The \code{rowRanges} must be a \code{\link{MTuples}}
 object rather than a \code{\link[GenomicRanges]{GRanges}} object.
 \item Certain \code{assays} are required. See \code{assays} argument below.
}
}
\section{Details}{

The rows of a MethPat object represent tuples (in genomic coordinates) of
interest. The tuples of interest are described by a \link{MTuples} or a
\link{MTuplesList} object, accessible using the \code{rowTuples} function,
described below. The \link{MTuples} and \link{MTuplesList} classes contain
sequence (e.g., chromosome) name, genomic coordinates, and strand
information, along with methylation-type information (e.g., CG or CHG). Each
tuple can be annotated with additional data; this data might be used to
describe the range (e.g., CpG island status) or to summarized results
relevant to the tuple. Rows may or may not have row names; they often will
not.
}

\section{Constructor}{

MethPat instances are constructed using the \code{MethPat} function with
arguments outlined above.
}

\section{Accessors}{

In the following code snippets, \code{x} is a MethPat instance.

\describe{
 \item{\code{rowTuples(x)}, \code{rowTuples(x) <- value}:}{Get or set the row
 data. \code{value} is a \link{MTuples} or \link{MTuplesList} object. Row
 names of \code{value} must be \code{NULL} or consistent with the existing
 row names of \code{x}}.
}
}

\section{MTuples compatibility (rowTuples access)}{

Many \link{MTuples} and \link{MTuplesList} operations are
supported on MethPat objects, using \code{rowTuples}.

Supported operations include: \code{\link{compare}},
\code{\link{duplicated}}, \code{\link{end}}, \code{\link{end<-}},
\code{\link{granges}}, \code{\link{match}}, \code{\link{mcols}},
\code{\link{mcols<-}}, \code{\link{methinfo}}, \code{\link{methtype}},
\code{\link{order}}, \code{\link{ranges}}, \code{\link{ranges<-}},
\code{\link{seqinfo}}, \code{\link{seqinfo<-}}, \code{\link{seqnames}},
\code{\link{sort}}, \code{\link{start}}, \code{\link{start<-}},
\code{\link{strand}}, \code{\link{strand<-}},
\code{\link[GenomicTuples]{tuples}}, \code{\link[GenomicTuples]{strand<-}},
\code{\link{width}}, \code{\link{width<-}}.

Since the \link{MTuples} class is a subclass of the
\link[GenomicTuples]{GTuples} class, which is in turn a subclass of the
\link[GenomicRanges]{GRanges} class, there are also methods
compatabile with \link[GenomicTuples]{GTuples}/
\link[GenomicRanges]{GRanges}. See also
\code{?\link[SummarizedExperiment]{shift}},
\code{?\link[SummarizedExperiment]{isDisjoint}},
\code{?\link[SummarizedExperiment]{coverage}},
\code{?\link[SummarizedExperiment]{findOverlaps}}, and
\code{?\link[SummarizedExperiment]{nearest}} for more
\emph{GTuples/GRanges compatibility methods}.

Not all \link{MTuples}/\link[GenomicRanges]{GRanges}
operations are supported, because they do not make sense for MethPat objects
(e.g., \code{name}, \code{as.data.frame}, \code{c}, \code{splitAsList}),
involve non-trivial combination or splitting or rows (e.g., \code{disjoin},
\code{gaps}, \code{reduce}, \code{unique}) or have not yet been implemented
(\code{Ops}, \code{map}, \code{window}, \code{window<-}).

\strong{WARNING:} The preferred getter and setter of tuple information are
\code{rowTuples(x)} and \code{rowTuples(x) <- value}, respectively.
\code{rowRanges(x)}/\code{granges(x)} and \code{rowRanges(x) <- value}/
\code{granges(x) <- value} have the same effect since \code{rowTuples}
is merely more informatively named alias to \code{rowRanges} for
\code{MethPat} objects.

\strong{WARNING:} The use of \code{ranges(x)}, \code{ranges(x) <- value},
\code{start(x)}, \code{start(x) <- value}, \code{end(x)},
\code{end(x) <- value}, \code{width(x)} and \code{width(x) <- value} are
discouraged (although not forbidden) since these are generally not what is
really desired or required when working with MethPat objects; see
\link[GenomicTuples]{GTuples} for further discussion.
}

\section{Subsetting}{

In the code snippets below, \code{x} is a MethPat object.

\describe{
 \item{\code{subset(x, subset, select):}{Create a subset of \code{x} using
 an expression \code{subset} referring to columns of \code{rowTuples(x)}
 (including "seqnames", "start", "end", "width", "strand", and
 \code{names(mcols(x))}) and/or \code{select} referring to column names of
 \code{colData(x)}}}.
}
}

\section{Extension}{

MethPat is implemented as an S4 class, and can be extended in the usual way,
using \code{contains = "Methpat"} in the new class definition.
}

\section{Combining}{

In the code snippets below, \code{x}, \code{y} and \code{...} are
MethPat instances to be combined. All \code{MethPat} instances must have the
same \code{\link{size}} tuples and have compatible \link{Seqinfo} and
\link{MethInfo}.

\describe{
 \item{\code{cbind(...), rbind(...)}:}{\code{cbind} combines objects with
 identical tuples (\code{rowTuples}) but different samples (columns in
 \code{assays}). The colnames in \code{colData} must match or an error is
 thrown. Duplicate columns of \code{mcols(rowRanges(MethPat))} must
 contain the same data.

 \code{rbind} combines objects with different tuples (\code{rowTuples}) and
 the same subjects in (columns in \code{assays}). Duplicate columns of
 \code{colData} must contain the same data.

 \code{metadata} from all objects are combined into a
 \code{list} with no name checking.}

 \item{\code{combine(x, y, ...)}:}{\code{combine} combines objects with
 different tuples (\code{rowTuples}) and different samples (columns in
 \code{assays}) using an "incomplete" union strategy. Please read
 \code{\link[BiocGenerics]{combine}} for the difference between the union
 and intersection strategies; the current method is "incomplete" because
 it requires that the samples (columns in \code{assays}) are distinct
 across \code{x}, \code{y} and \code{...}. This behaviour may change in
 future versions so that data from the same sample that is stored across
 multiple objects can be safely combined.
 }
}
}
\examples{
## TODO
}
\author{
Peter Hickey, \email{peter.hickey@gmail.com}, building on all the
real work of Martin Morgan for the
\link[SummarizedExperiment]{RangedSummarizedExperiment} class.
}
\seealso{
\itemize{
 \item \link{RangedSummarizedExperiment} objects.
 \item \link{SummarizedExperiment0} objects.
 \item \link[SummarizedExperiment]{shift},
 \link[SummarizedExperiment]{isDisjoint},
 \link[SummarizedExperiment]{coverage},
 \link[SummarizedExperiment]{findOverlaps}, and
 \link[SummarizedExperiment]{nearest} for more
 \emph{GTuples/GRanges compatibility methods}.
 \item \link{MTuples} objects.
 \item \link[GenomicTuples]{GTuples} objects in the \pkg{GenomicTuples}
 package.
}
}

