% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/MethPat-class.R
\docType{class}
\name{MethPat-class}
\alias{MethPat-class}
\title{MethPat instances}
\arguments{
\item{assays}{A \code{\link[base]{list}} or
\code{\link[S4Vectors]{SimpleList}} of matrix elements. All elements of the
list must have the same dimensions, and dimension names (if present) must be
consistent across elements and with row names of \code{rowData} and
\code{colData}. Specifically, for a \code{MethPat} object containing the
methylation patterns at genomic tuples of \code{\link[GenomicTuples]{size}}
\eqn{= m}, there are \eqn{2^m} required assays. For example, for 2-tuples
there are 4 required assays that must be named \code{MM}, \code{MU},
\code{UM} and \code{UU} (\code{M} = methylated, \code{U} = unmethylated).
\strong{TODO:} Should the \code{.makeMethPatNames} function be exported
and referenced here?}

\item{rowData}{A \code{\link{MTuples}} instance describing
the genomic tuple of the methylation loci. Row names, if present, become the
row names of the \code{MethPat}. The length of the \code{\link{MTuples}}
must equal the number of rows of the matrices in \code{assays}.}

\item{colData}{An optional, but recommended,
\code{\link[S4Vectors]{DataFrame}} describing the samples. Row names, if
present, become the column names of the \code{MethPat}.}

\item{exptData}{An optional \code{\link[S4Vectors]{SimpleList}} of arbitrary
content describing the overall experiment.}

\item{...}{For \code{MethPat}, S4 methods \code{\link[base]{list}} and
\code{\link[base]{matrix}}, arguments identical to those of the
\code{\link[S4Vectors]{SimpleList}} method.

For \code{assay}, \code{...} may contain \code{withDimnames}, which is
forwarded to \code{assays}.

For \code{cbind}, \code{rbind}, \code{...} contains \code{MethPat} objects
to be combined.

For other accessors, ignored.}

\item{verbose}{A \code{logical(1)} indicating whether messages about data
coerction during construction should be printed.}

\item{x,}{object An instance of \code{MethPat}.}

\item{i,j}{For \code{assay}, \code{assay<-}, \code{i} is an integer or
numeric scalar; see 'Details' for additional constraints.

For \code{[,MethPat}, \code{[,MethPat<-}, \code{i}, \code{j} are instances
that can act to subset the underlying \code{rowData}, \code{colData}, and
\code{\link[base]{matrix}} elements of \code{assays}.

For \code{[[,MethPat}, \code{[[<-MethPat}, \code{i} is a scalar index (e.g.
\code{character(1)}, or \code{integer(1)}) into a column of \code{colData}.}

\item{subset}{An expression which, when evaluated in the context of
\code{rowData(x)}, is a logical vector indiciating elements or rows to keep:
missing values are taken as false.}

\item{select}{An expression which, when evaluated in the context of
\code{colData(x)}, is a logical vector indicating elements or rows to keep:
missing values are taken as false.}

\item{name}{A symbol representing the name of a column of \code{colData}.}

\item{withDimnames}{A \code{logical(1)}, indicating whether dimnames should
be applied to extracted assay elements (this argument is ignored for the
setter \code{assays<-}).}

\item{drop}{A \code{logical(1)}, ignored by these methods.}

\item{value}{An instance of a class specified in the S4 method signature or
as outlined in 'Details'.}

\item{deparse.level}{See \code{\link[base]{cbind}} for a description of this
argument.}
}
\description{
The \code{MethPat} class is a matrix-like container where rows represent
genomic tuples of interest and columns represent samples (with sample data
summarized as a \code{\link[S4Vectors]{DataFrame-class}}). A
\code{MethPat} object contains the counts of how many times each methylation
pattern is observed for that genomic tuple in each sample. For example,
there are four possible methylation patterns at 2-tuples: \code{MM},
\code{MU}, \code{UM} and \code{UU}.

The \code{MethPat} class extends the
\code{\link[GenomicRanges]{SummarizedExperiment}} class. The key
differences are:
\itemize{
 \item The \code{rowData} must be a \code{\link{MTuples}}
 object rather than a \code{\link[GenomicRanges]{GRanges}} object.
 \item Certain \code{assays} are required. See \code{assays} argument below.
}
}
\section{Constructor}{

Instances are constructed using the \code{MethPat} function with arguments
outlined aboved.
}

\section{Accessors}{

In the following code snippets, \code{x} is a \code{MethPat} instance.

\describe{
 \item{\code{assays(x)}, \code{assays(x) <- value}:}{Get or set the assays.
 \code{value} is a \code{list} or \code{\link[S4Vectors]{SimpleList}}, each
 element of which is a \code{\link[base]{matrix}} with the same dimensions
 as \code{x}.}
 \item{\code{assay(x, i)}, \code{assay(x, i) <- value}:}{A conventient
 alternative (to \code{assays(x)[[i]]}, \code{assays(x)[[i]] <- value)} to
 get or set the \code{i}th (default first) assay element. \code{value} must
 be a \code{\link[base]{matrix}} of the same dimensions as \code{x}, and
 with dimension names \code{NULL} or consistent with those of \code{x}.}
 \item{\code{rowData(x)}, \code{rowData(x) <- value}:}{Get or set the row
 data. \code{value} is a \code{\link{MTuples}} instance. Row
 names of \code{value} must be \code{NULL} or consistent with the existing
 row names of \code{x}.}
 \item{\code{colData(x)}, \code{colData(x) <- value}:}{Get or set the column
 data. \code{value} is a \code{\link[S4Vectors]{DataFrame}} instance. Row
 names of \code{value} must be \code{NULL} or consistent with the existing
 columns of \code{x}.}
 \item{\code{exptData(x)}, \code{exptData(x) <- value}:}{Get or set the
 experiment data. \code{value} is a \code{\link[base]{list}} or
 \code{\link[S4Vectors]{SimpleList}} instance, with arbitrary content.}
 \item{\code{dim(x)}:}{Get the dimensions (tuples x samples) of the
 \code{MethPat} object.}
 \item{\code{dimnames(x)}, \code{dimnames(x) <- value}:}{Get or set the
 dimension names. \code{value} is usually a list of length 2, containing
 elements that are either \code{NULL} or vectors of appropriate length for
 the corresponding dimension. \code{value} can be \code{NULL}, which removes
 dimension names. This method implies that \code{rownames},
 \code{rownames<-}, \code{colnames}, and \code{colnames<-} are all
 available.}
}
}

\section{MTuples/GTuples compatibility (rowData access)}{

Since an \code{MTuples} classes (used in the \code{rowData}) slot) extends
the \code{GTuples}, many \code{\link[GenomicTuples]{GTuples}} operations are
supported on \code{MetPath} and derived instances, using \code{rowData}.

\strong{WARNING:} The preferred getter/setter of tuple information is
\code{tuples(x)}/\code{tuples(x) <- value}. In short, the use of
\code{granges(x)}, code{ranges(x)}, \code{ranges(x) <- value},
\code{start(x)}, \code{start(x) <- value}, \code{end(x)},
\code{end(x) <- value}, \code{width(x)} and \code{width(x) <- value} is
generally not what is really desired or required when working with
\code{MethPat} objects; see \code{\link[GenomicTuples]{GTuples}} for further
discussion.

Supported operations include: \code{\link[GenomicTuples]{compare}},
\code{\link[GenomicTuples]{countOverlaps}},
\code{\link[GenomicTuples]{distance}},
\code{\link[GenomicTuples]{distanceToNearest}},
\code{\link[GenomicTuples]{duplicated}},
\code{\link[GenomicTuples]{end}} (\strong{not recommended}, see above),
\code{\link[GenomicTuples]{end<-}} (\strong{not recommended}, see above),
\code{\link[GenomicTuples]{findOverlaps}},
\code{\link[GenomicTuples]{follow}},
\code{\link[GenomicTuples]{granges}} (\strong{not recommended}, see above),
\code{\link[GenomicTuples]{IPD}},
\code{\link[GenomicTuples]{match}},
\code{\link[GenomicTuples]{mcols}},
\code{\link[GenomicTuples]{mcols<-}},
\code{\link[GenomicTuples]{nearest}},
\code{\link[GenomicTuples]{order}},
\code{\link[GenomicTuples]{overlapsAny}},
\code{\link[GenomicTuples]{precede}},
\code{\link[GenomicTuples]{ranges}} (\strong{not recommended}, see above),
\code{\link[GenomicTuples]{ranges<-}} (\strong{not recommended}, see above),
\code{\link[GenomicTuples]{rank}},
\code{\link[GenomicTuples]{relistToClass}},
\code{\link[GenomicTuples]{restrict}},
\code{\link[GenomicTuples]{seqinfo}},
\code{\link[GenomicTuples]{seqinfo<-}},
\code{\link[GenomicTuples]{seqnames}},
\code{\link[GenomicTuples]{shift}},
\code{\link[GenomicTuples]{size}},
\code{\link[GenomicTuples]{sort}},
\code{\link[GenomicTuples]{split}},
\code{\link[GenomicTuples]{start}} (\strong{not recommended}, see above),
\code{\link[GenomicTuples]{start<-}} (\strong{not recommended}, see above),
\code{\link[GenomicTuples]{strand}},
\code{\link[GenomicTuples]{strand<-}},
\code{\link[GenomicTuples]{subsetByOverlaps}},
\code{\link[GenomicTuples]{tuples}},
\code{\link[GenomicTuples]{tuples<-}},
\code{\link[GenomicTuples]{width}} (\strong{not recommended}, see above),
\code{\link[GenomicTuples]{width<-}} (\strong{not recommended}, see above).

Not all \code{\link[GenomicTuples]{GTuples}} operations are supported,
because they do not make sense for \code{MethPat} objects (e.g.,
\code{length}, \code{name}, \code{as.data.frame}, \code{c},
\code{splitAsList}), involve non-trivial combination or splitting of rows
(e.g., unique), or have not yet been implemented (\code{window},
\code{window<-}).

Additionally, all \code{MTuples}-specific methods are also defined, such as
\code{\link{methinfo}} and \code{\link{methtype}}.
}

\section{Subsetting}{

\describe{
 \item{\code{x[i, j], x[i, j] <- value}:}{Create or replace a subset of
 \code{x}. \code{i}, \code{j} can be \code{numeric}, \code{logical},
 \code{character}, or \code{missing}. \code{value} must be a
 \code{MethPat} instance with dimensions, dimension names, and assay
 elements consistent with the subset \code{x[i, j]} being replaced.}
 \item{\code{subset(x, subset, select)}:}{Create a subset of \code{x} using
 an expression \code{subset} referring to columns of \code{rowData(x)}
 (including \code{seqnames}, \code{start}, \code{end}, \code{width},
 \code{strand}, and \code{names(mcols(x))}) and / or \code{select} referring
 to column names of \code{colData(x)}.}
}

Additional subsetting accessors provide convenient access to \code{colData}
columns
 \describe{
   \item{\code{x$name, x$name <- value}}{Access or replace column
   \code{name} in \code{x}.}
   \item{\code{x[[i, ...]], x[[i, ...]] <- value}}{Access or replace column
   \code{i} in \code{x}.}
 }
}

\section{Combining}{

In the code snippets below, \code{x}, \code{y} and \code{...} are
\code{MethPat} instances to be combined. All \code{MethPat} instances must
have the same \code{\link{size}} tuples and have compatible \code{seqinfo}.
\describe{
 \item{\code{cbind(...), rbind(...)}:}{\code{cbind} combines objects with
 identical tuples (\code{rowData}) but different samples (columns in
 \code{assays}). The colnames in \code{colData} must match or an error is
 thrown. Duplicate columns of \code{mcols(rowData(MethPat))} must contain
 the same data.

 \code{rbind} combines objects with different tuples (\code{rowData}) and
 the same subjects in (columns in \code{assays}). Duplicate columns of
 \code{colData} must contain the same data.

 \code{exptData} from all objects are combined into a
 \code{\link[S4Vectors]{SimpleList} with no name checking.}
 }
 \item{\code{combine(x, y, ...)}:}{\code{combine} combines objects with
 different tuples (\code{rowData}) and different samples (columns in
 \code{assays}) using an "incomplete" union strategy. Please read
 \code{\link[BiocGenerics]{combine}} for the difference between the union
 and intersection strategies; the current method is "incomplete" because it
 requires that the samples (columns in \code{assays}) are distinct across
 \code{x}, \code{y} and \code{...}. This behaviour may change in future
 versions so that data from the same sample that is stored across multiple
 objects can be safely combined.

 The colnames in \code{colData} must
 match or an error is thrown. Duplicate columns of
 \code{mcols(rowData(MethPat))} must contain the same data.

 \code{exptData} from all objects are combined into a
 \code{\link[S4Vectors]{SimpleList} with no name checking.}
 }
}
}
\examples{
## TODO
}
\author{
Peter Hickey, building on all the real work of Martin Morgan for the
\code{\link[GenomicRanges]{SummarizedExperiment}} class.
}
\seealso{
\code{\link[GenomicRanges]{SummarizedExperiment}}
}

