% Generated by roxygen2 (4.0.2): do not edit by hand
\name{readMethtuple}
\alias{readMethtuple}
\title{Read \code{.tsv} output files from \code{methtuple} software.}
\usage{
readMethtuple(files, sample_names = paste0("sample_", seq_along(files)),
  methinfo = MethInfo(), seqinfo = NULL, verbose = getOption("verbose"),
  bpparam = bpparam())
}
\arguments{
\item{files}{The \code{.tsv} files created by \code{comethylation}. These
files may be compressed with gzip or bzip2 (not yet implemented). All files
must contain the same sized m-tuples. Files will be decompressed to a
temporary directory via a call to \code{\link[base]{tempdir}}.}

\item{sample_names}{The sample names of each file. Must be unique.}

\item{methinfo}{A \code{\link{MethInfo}} object containing information about
the the methylation loci in the \code{files}. This should be the minimal
\code{MethInfo} object necessary to describe all methylation loci in all
\code{files}. For example, if reading in two files, one with \code{CG} and
one with \code{CHG} methylation, then the \code{methinfo} should be
\code{MethInfo(c('CG', 'CHG'))}. \strong{NB:} It is generally recommended
that you only store samples with the same \code{methinfo} in each
\code{MethPat} object.}

\item{seqinfo}{A \code{\link[GenomeInfoDb]{Seqinfo}} object containing
information about the reference genome of the samples. If none is supplied
(\code{NULL}) then a bare-bones \code{\link[GenomeInfoDb]{Seqinfo}} object
will be created containing only the \code{seqnames} inferred from the
\code{files}.}

\item{verbose}{A \code{\link{logical(1)}} indicating whether messages about
the reading of the data (via \code{data.table::\link[data.table]{fread}})
and about data coercion during construction of the \code{\link{MethPat}}
object should be printed. Regardless of whether \code{verbose} is
\code{TRUE} or \code{FALSE}, \code{readMethtuple} reports its progress via
calls to \code{\link[base]{message}}; these can be suppressed by wrapped the
call to \code{readMethtuple} in \code{\link[base]{suppressMesssages}}.}

\item{bpparam}{A \code{\link[BiocParallel]{bpparam}} object specifying the
parallelisation strategy, if any. See below for a discussion of
parallelisation options available with \code{readMethtuple}.}
}
\value{
A \code{\link{MethPat}} object
}
\description{
Read the \code{.tsv} output files from \code{methtuple} and construct a single
\code{\link{MethPat}} object.  \code{methtuple}
(\url{www.github.com/PeteHaitch/methtuple}) is Python software to extract
methylation patterns at methylation loci from \code{BAM} files.
All files should contain the same size m-tuples, e.g., all 2-tuples. All
files should be mapped against the same reference genome, which is supplied
as the \code{seqinfo} argument.
}
\section{Parallelisation}{

Parallelisation of \code{readMethtuple} is partially supported. Files
may be decompressed in parallel but not read-in in parallel.
Parallelisation uses the \pkg{BiocParallel} package. By default this uses a
\code{\link[BiocParallel]{MulticoreParam()}} instance or the userâ€™s
preferred back-end if they have used \code{\link[BiocParallel]{register}}.
Please consult the \pkg{BiocParallel} documentation for details on
registering a parallel backend and parallelisation support available on
different operating systems.
}
\examples{
# Using example data supplied with the MethylationTuples package
# Each file contains data on 20,000 tuples from a whole-genome
# bisulfite-sequencing experiment on a human frontal cortex sample
# (http://www.ncbi.nlm.nih.gov/sra/?term=SRR949193).

# 1-tuples
x <- readMethtuple(system.file("extdata", "SRR949193_20k.rmdup.CG.1.tsv.gz",
package = "MethylationTuples"), sample_names = "SRR949193_20k",
methinfo = MethInfo('CG'), seqinfo = Seqinfo(seqnames = 'chr1',
seqlengths = 249250621, isCircular = FALSE, genome = 'hg19'))

# 3-tuples
y <- readMethtuple(system.file("extdata", "SRR949193_20k.rmdup.CG.3.tsv.gz",
package = "MethylationTuples"), sample_names = "SRR949193_20k",
methinfo = MethInfo('CG'), seqinfo = Seqinfo(seqnames = 'chr1',
seqlengths = 249250621, isCircular = FALSE, genome = 'hg19'))

# Can't mix 1-tuples and 3-tuples
\dontrun{
readMethtuple(c(system.file("extdata", "SRR949193_20k.rmdup.CG.1.tsv.gz",
package = "MethylationTuples"), system.file("extdata",
"SRR949193_20k.rmdup.CG.3.tsv.gz", package = "MethylationTuples")))
}
}
\seealso{
\code{\link{MethPat}}
}

